{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Medium Kahuna\
Software Spec. Top\
10/9/23, v1, Jud\
\
Basic operation is a constant frequency timer interrupt (probably about 1 kHz/1 millisecond) and a real time loop (which occurs as often as it can and has variable frequency/period). The average period of the real time loop needs to be less than half the interrupt timer period. The depth of the queues described below determines just how \'93long term\'94 that average can be.\
\
During the timer interrupt, all inputs are read (polled) and queued (streamed) to the real time loop (task) and all queued (streamed from the real time loop) outputs are written, if they can be (not blocked). Each item (event/signal) streamed is given an integer time stamp which is the running count of timer interrupts (which rolls over periodically. No more often than every 32 seconds).\
\
The inputs include the encoder, various switches, and analog channels (wired remote inputs). It does not include serial ports, USB, or other things that the real time loop deals with directly. The outputs include the wired remote outputs (pwm analog channels) and LEDs. When the output items are actually written (by the timer interrupt), they are given a time stamp (current timer interrupt count) and added to the input stream. Various stream processing\
\
\
\
\
\
\
}